cmdhistory=["(migrated? \\"shouts\\")" "(migrated? \\"keepblog\\")" "(create-user-table)" "(migrate)" "(create {\:username \\"yangruihan\\" \:password \\"123456\\" \:email \\"yrh@test.com\\"})" "(create [\\"yangruihan\\" \\"123456\\" \\"yrh@test.com\\"])" "(get-by {\:a \\"a\\"} {\:b \\"b\\"})" "(get-by {\:a \\"a\\"})" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(doseq [[k v] {\:a \\"a\\" \:b \\"b\\"}] (prn k v))" "`(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (prn k v))" "(defmacro get-1 [args] `(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (prn k v)))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (do (prn args) (prn k v))))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn args) (prn k v))))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(macroexpand-1 '(get-1 {\:a \\"a\\" \:b \\"b\\"}))" "(defmacro get-1 [args] `(doseq [['k 'v] ~args] (do (prn args) (prn k v))))" "(macroexpand-1 '(get-1 {\:a \\"a\\" \:b \\"b\\"}))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn ~args) (prn ~k ~v))))" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn ~args) (prn k v))))" "(defun get-by [args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(defn get-by [args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(defn get-by [& args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(get-by {\:a \\"a\\"} {\:b \\"b\\"})" "(all)" "(get-by {\:id 1})" "(get-by {\:username \\"yangruihan\\"})" "(get-by {\:username \\"test\\" \:id 1})" "(get-by {\:username \\"test\\" \:id 2})" "(defmacro set-config []\\n  (use 'selmer.parser) (selmer.parser/cache-off\!)(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\")))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n     `(use 'selmer.parser) \\n     `(selmer.parser/cache-off\!)\\n     `(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\")))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n      (do \\r\\n        `(selmer.parser/cache-off\!)\\r\\n        `(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n         (do \\r\\n           '(selmer.parser/cache-off\!)\\r\\n           '(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(macroexpand-1 '(set-config))" "(do (prn 1) (prn 2))" "(defmacro set-config []\\r\\n            (do \\r\\n              (selmer.parser/cache-off\!)\\r\\n              (selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(use 'selmer.parser)" "(defmacro set-config []\\r\\n               (do \\r\\n                 (selmer.parser/cache-off\!)\\r\\n                 (selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(set-config)" "(macroexpand-1 '(set-config))" "(macroexpand-1 (set-config))" "(set-config)" "(get-by {\:username \\"123\\"})" "(first (get-by {\:username \\"123\\"}))" "(let [{id \:id,\\r\\n         _password \:password,\\r\\n         \:as user}\\r\\n        (first (get-by {\:username username}))]\\n  (println id)\\n  (println password))" "(let [{id \:id,\\r\\n            _password \:password,\\r\\n            \:as user}\\r\\n           (first (get-by {\:username \\"123\\"}))]\\r\\n     (println id)\\r\\n     (println password))" "(let [{id \:id,\\r\\n               _password \:password,\\r\\n               \:as user}\\r\\n              (first (get-by {\:username \\"123\\"}))]\\r\\n        (println id)\\r\\n        (println _password))" "(login\! {\:username \\"123\\" \:password \\"1234576\\"})" "(create\! {\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create {\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(get-by {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(\= '() nil)" "(alength '())" "(count '())" "(\= 0 nil)" "(create\! {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(\= 0 (count (get-by  {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})))" "(create\! {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! '{\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! '{\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(if (\= 0 (count (get-by {\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})))\\n  (println \\"1\\")\\n  (println \\"2\\"))" "(if (\= 0 (count (get-by {\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})))\\r\\n     (println \\"1\\")\\r\\n     (println \\"2\\"))" "(if (\= 0 (count (get-by {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})))\\r\\n        (println \\"1\\")\\r\\n        (println \\"2\\"))" "(create\! {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(def user {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(defn create\! [user]\\r\\n  (if (\= 0 (count (get-by {\:username (\:username user)})))\\r\\n    (if (create user)\\r\\n      (first (get-by user))\\r\\n      (vali/set-error \:create-user-error \\"\u521B\u5EFA\u7528\u6237\u53D1\u751F\u672A\u77E5\u9519\u8BEF\\")))\\r\\n    (vali/set-error \:create-user-error \\"\u7528\u6237\u540D\u5DF2\u5B58\u5728\\"))" "(create\! user)" "(def user {\:username \\"test3\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! user)" "(get-by user)" "(create user)" "(defn create [user]\\r\\n  (let [{\:keys [username password email]} user]\\r\\n\\t  (try\\r\\n     (insert users\\r\\n\\t            (values {\:username username,\\r\\n\\t                     \:password password,\\r\\n\\t                     \:email email}))\\r\\n     true)\\r\\n     (catch Exception e\\r\\n       (println e)\\r\\n       (vali/set-error \:base-error \\"\u6570\u636E\u5E93\u63D2\u5165\u5931\u8D25\\")\\r\\n       nil)))" "(defn create [user]\\r\\n  (let [{\:keys [username password email]} user]\\r\\n\\t  (try\\r\\n     (insert users\\r\\n\\t            (values {\:username username,\\r\\n\\t                     \:password password,\\r\\n\\t                     \:email email}))\\r\\n     (catch Exception e\\r\\n       (println e)\\r\\n       (vali/set-error \:base-error \\"\u6570\u636E\u5E93\u63D2\u5165\u5931\u8D25\\")\\r\\n       nil))))" "(def user {\:username \\"test4\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! user)" "(create user)" "(if (create user)\\n  (println 1)\\n  (println 2))" "(defn create\! [user]\\r\\n  (if (\= 0 (count (get-by {\:username (\:username user)})))\\r\\n    (if (create user)\\r\\n      (first (get-by user))\\r\\n      (vali/set-error \:create-user-error \\"\u521B\u5EFA\u7528\u6237\u53D1\u751F\u672A\u77E5\u9519\u8BEF\\"))\\r\\n    (vali/set-error \:create-user-error \\"\u7528\u6237\u540D\u5DF2\u5B58\u5728\\")))" "(def user {\:username \\"test4\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! user)" "(migrate)" "defmacro" "(defmacro [parameters]\\n  `(println ~@parameters))" "(defmacro [parameters]\\r\\n     `(println ~@(parameters)))" "(defmacro [& parameters]\\n  `(println ~@parameters))" "(defmacro [& parameters]\\r\\n     `(println ~@(parameters))\\n     )" "(defn [& p]\\n  (print p))" "(defn a [& p]\\r\\n     (print p))" "(a  [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                          [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                          [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                          [\:email \\"varchar(255) NOT NULL\\"])" "(defmacro b [& parameters]\\r\\n        `(println ~@(parameters))\\r\\n        )" "(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL])" "(defmacro b [& parameters]\\r\\n           `(println ~@parameters)\\r\\n           )" "(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL])" "(defmacro b [& parameters]\\r\\n              `(println ~parameters)\\r\\n              )" "(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL])" "macroexpand-1" "(macroexpand-1 '(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL]))" "(defmacro b [& parameters]\\r\\n                 `(println ~@parameters)\\r\\n                 )" "(macroexpand-1 '(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL]))" "(defmacro create-table [table-name & parameters]\\r\\n  `(when (not (migrated? ~table-name))\\r\\n     (println (str \\"Creating table \\" ~table-name \\"...\\")) (flush)\\r\\n     (sql/db-do-commands spec\\r\\n                         (sql/create-table-ddl\\r\\n                           `table-name\\r\\n                           ~@parameters))\\r\\n     (println \\"Create Done\!\\")))" "(create-table \\"user\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                          [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                          [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                          [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                          [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"])" "(create-table \\"test\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                             [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                             [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                             [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                             [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"])" "(macroexpand-1 '(create-table \\"test\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                                [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                                [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                                [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                                [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"]))" "(defmacro create-table [table-name & parameters]\\r\\n  `(when (not (migrated? ~table-name))\\r\\n     (println (str \\"Creating table \\" ~table-name \\"...\\")) (flush)\\r\\n     (sql/db-do-commands spec\\r\\n                         (sql/create-table-ddl\\r\\n                           ~table-name\\r\\n                           ~@parameters))\\r\\n     (println \\"Create Done\!\\")))" "(macroexpand-1 '(create-table \\"test\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                                   [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                                   [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                                   [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                                   [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"]))" "(create-table \\"test\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                                      [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                                      [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                                      [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                                      [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"])" "(migrate)" "(get-userinfo-by-user {\:username \\"test\\"})" "(get-userinfo-by-user {})" "(get-userinfo-by-user {\:username username})" "(defn get-userinfo-by-user []\\r\\n  (select userinfos\\r\\n          (with users)))" ";; \u5F97\u5230\u4E00\u4E2A\u7528\u6237\u7684\u4E2A\u4EBA\u4FE1\u606F\\r\\n(defn get-userinfo-by-user []\\r\\n  (println (select userinfo/userinfos\\r\\n                   (with users))))" "(get-userinfo-by-user)" "(defentity userinfos\\r\\n  (table \:user_infos)\\r\\n  (belongs-to users))" "(get-userinfo-by-user)" "(defentity userinfos\\r\\n  (table \:user_infos)\\r\\n  (belongs-to users {\:fk \:user_id}))" " (get-userinfo-by-user)" "(get-userinfo-by-user)"]
eclipse.preferences.version=1
