cmdhistory=["(migrated? \\"shouts\\")" "(migrated? \\"keepblog\\")" "(create-user-table)" "(migrate)" "(create {\:username \\"yangruihan\\" \:password \\"123456\\" \:email \\"yrh@test.com\\"})" "(create [\\"yangruihan\\" \\"123456\\" \\"yrh@test.com\\"])" "(get-by {\:a \\"a\\"} {\:b \\"b\\"})" "(get-by {\:a \\"a\\"})" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(doseq [[k v] {\:a \\"a\\" \:b \\"b\\"}] (prn k v))" "`(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (prn k v))" "(defmacro get-1 [args] `(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (prn k v)))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (do (prn args) (prn k v))))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn args) (prn k v))))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(macroexpand-1 '(get-1 {\:a \\"a\\" \:b \\"b\\"}))" "(defmacro get-1 [args] `(doseq [['k 'v] ~args] (do (prn args) (prn k v))))" "(macroexpand-1 '(get-1 {\:a \\"a\\" \:b \\"b\\"}))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn ~args) (prn ~k ~v))))" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn ~args) (prn k v))))" "(defun get-by [args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(defn get-by [args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(defn get-by [& args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(get-by {\:a \\"a\\"} {\:b \\"b\\"})" "(all)" "(get-by {\:id 1})" "(get-by {\:username \\"yangruihan\\"})" "(get-by {\:username \\"test\\" \:id 1})" "(get-by {\:username \\"test\\" \:id 2})" "(defmacro set-config []\\n  (use 'selmer.parser) (selmer.parser/cache-off\!)(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\")))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n     `(use 'selmer.parser) \\n     `(selmer.parser/cache-off\!)\\n     `(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\")))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n      (do \\r\\n        `(selmer.parser/cache-off\!)\\r\\n        `(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n         (do \\r\\n           '(selmer.parser/cache-off\!)\\r\\n           '(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(macroexpand-1 '(set-config))" "(do (prn 1) (prn 2))" "(defmacro set-config []\\r\\n            (do \\r\\n              (selmer.parser/cache-off\!)\\r\\n              (selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(use 'selmer.parser)" "(defmacro set-config []\\r\\n               (do \\r\\n                 (selmer.parser/cache-off\!)\\r\\n                 (selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(set-config)" "(macroexpand-1 '(set-config))" "(macroexpand-1 (set-config))" "(set-config)" "(get-by {\:username \\"123\\"})" "(first (get-by {\:username \\"123\\"}))" "(let [{id \:id,\\r\\n         _password \:password,\\r\\n         \:as user}\\r\\n        (first (get-by {\:username username}))]\\n  (println id)\\n  (println password))" "(let [{id \:id,\\r\\n            _password \:password,\\r\\n            \:as user}\\r\\n           (first (get-by {\:username \\"123\\"}))]\\r\\n     (println id)\\r\\n     (println password))" "(let [{id \:id,\\r\\n               _password \:password,\\r\\n               \:as user}\\r\\n              (first (get-by {\:username \\"123\\"}))]\\r\\n        (println id)\\r\\n        (println _password))" "(login\! {\:username \\"123\\" \:password \\"1234576\\"})"]
eclipse.preferences.version=1
