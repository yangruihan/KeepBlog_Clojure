cmdhistory=["(migrated? \\"shouts\\")" "(migrated? \\"keepblog\\")" "(create-user-table)" "(migrate)" "(create {\:username \\"yangruihan\\" \:password \\"123456\\" \:email \\"yrh@test.com\\"})" "(create [\\"yangruihan\\" \\"123456\\" \\"yrh@test.com\\"])" "(get-by {\:a \\"a\\"} {\:b \\"b\\"})" "(get-by {\:a \\"a\\"})" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(doseq [[k v] {\:a \\"a\\" \:b \\"b\\"}] (prn k v))" "`(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (prn k v))" "(defmacro get-1 [args] `(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (prn k v)))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~{\:a \\"a\\" \:b \\"b\\"}] (do (prn args) (prn k v))))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn args) (prn k v))))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(macroexpand-1 '(get-1 {\:a \\"a\\" \:b \\"b\\"}))" "(defmacro get-1 [args] `(doseq [['k 'v] ~args] (do (prn args) (prn k v))))" "(macroexpand-1 '(get-1 {\:a \\"a\\" \:b \\"b\\"}))" "(get-1 {\:a \\"a\\" \:b \\"b\\"})" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn ~args) (prn ~k ~v))))" "(defmacro get-1 [args] `(doseq [[k v] ~args] (do (prn ~args) (prn k v))))" "(defun get-by [args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(defn get-by [args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(defn get-by [& args] (doseq [[k v] args] (do (prn args) (prn k v))))" "(get-by {\:a \\"a\\" \:b \\"b\\"})" "(get-by {\:a \\"a\\"} {\:b \\"b\\"})" "(all)" "(get-by {\:id 1})" "(get-by {\:username \\"yangruihan\\"})" "(get-by {\:username \\"test\\" \:id 1})" "(get-by {\:username \\"test\\" \:id 2})" "(defmacro set-config []\\n  (use 'selmer.parser) (selmer.parser/cache-off\!)(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\")))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n     `(use 'selmer.parser) \\n     `(selmer.parser/cache-off\!)\\n     `(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\")))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n      (do \\r\\n        `(selmer.parser/cache-off\!)\\r\\n        `(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(macroexpand-1 '(set-config))" "(defmacro set-config []\\r\\n         (do \\r\\n           '(selmer.parser/cache-off\!)\\r\\n           '(selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(macroexpand-1 '(set-config))" "(do (prn 1) (prn 2))" "(defmacro set-config []\\r\\n            (do \\r\\n              (selmer.parser/cache-off\!)\\r\\n              (selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(use 'selmer.parser)" "(defmacro set-config []\\r\\n               (do \\r\\n                 (selmer.parser/cache-off\!)\\r\\n                 (selmer.parser/set-resource-path\! (clojure.java.io/resource \\"templates\\"))))" "(set-config)" "(macroexpand-1 '(set-config))" "(macroexpand-1 (set-config))" "(set-config)" "(get-by {\:username \\"123\\"})" "(first (get-by {\:username \\"123\\"}))" "(let [{id \:id,\\r\\n         _password \:password,\\r\\n         \:as user}\\r\\n        (first (get-by {\:username username}))]\\n  (println id)\\n  (println password))" "(let [{id \:id,\\r\\n            _password \:password,\\r\\n            \:as user}\\r\\n           (first (get-by {\:username \\"123\\"}))]\\r\\n     (println id)\\r\\n     (println password))" "(let [{id \:id,\\r\\n               _password \:password,\\r\\n               \:as user}\\r\\n              (first (get-by {\:username \\"123\\"}))]\\r\\n        (println id)\\r\\n        (println _password))" "(login\! {\:username \\"123\\" \:password \\"1234576\\"})" "(create\! {\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create {\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(get-by {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(\= '() nil)" "(alength '())" "(count '())" "(\= 0 nil)" "(create\! {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(\= 0 (count (get-by  {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})))" "(create\! {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! '{\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! '{\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(if (\= 0 (count (get-by {\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})))\\n  (println \\"1\\")\\n  (println \\"2\\"))" "(if (\= 0 (count (get-by {\:username \\"test1\\" \:password \\"test\\" \:email \\"test@test.com\\"})))\\r\\n     (println \\"1\\")\\r\\n     (println \\"2\\"))" "(if (\= 0 (count (get-by {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})))\\r\\n        (println \\"1\\")\\r\\n        (println \\"2\\"))" "(create\! {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(def user {\:username \\"test2\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(defn create\! [user]\\r\\n  (if (\= 0 (count (get-by {\:username (\:username user)})))\\r\\n    (if (create user)\\r\\n      (first (get-by user))\\r\\n      (vali/set-error \:create-user-error \\"\u521B\u5EFA\u7528\u6237\u53D1\u751F\u672A\u77E5\u9519\u8BEF\\")))\\r\\n    (vali/set-error \:create-user-error \\"\u7528\u6237\u540D\u5DF2\u5B58\u5728\\"))" "(create\! user)" "(def user {\:username \\"test3\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! user)" "(get-by user)" "(create user)" "(defn create [user]\\r\\n  (let [{\:keys [username password email]} user]\\r\\n\\t  (try\\r\\n     (insert users\\r\\n\\t            (values {\:username username,\\r\\n\\t                     \:password password,\\r\\n\\t                     \:email email}))\\r\\n     true)\\r\\n     (catch Exception e\\r\\n       (println e)\\r\\n       (vali/set-error \:base-error \\"\u6570\u636E\u5E93\u63D2\u5165\u5931\u8D25\\")\\r\\n       nil)))" "(defn create [user]\\r\\n  (let [{\:keys [username password email]} user]\\r\\n\\t  (try\\r\\n     (insert users\\r\\n\\t            (values {\:username username,\\r\\n\\t                     \:password password,\\r\\n\\t                     \:email email}))\\r\\n     (catch Exception e\\r\\n       (println e)\\r\\n       (vali/set-error \:base-error \\"\u6570\u636E\u5E93\u63D2\u5165\u5931\u8D25\\")\\r\\n       nil))))" "(def user {\:username \\"test4\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! user)" "(create user)" "(if (create user)\\n  (println 1)\\n  (println 2))" "(defn create\! [user]\\r\\n  (if (\= 0 (count (get-by {\:username (\:username user)})))\\r\\n    (if (create user)\\r\\n      (first (get-by user))\\r\\n      (vali/set-error \:create-user-error \\"\u521B\u5EFA\u7528\u6237\u53D1\u751F\u672A\u77E5\u9519\u8BEF\\"))\\r\\n    (vali/set-error \:create-user-error \\"\u7528\u6237\u540D\u5DF2\u5B58\u5728\\")))" "(def user {\:username \\"test4\\" \:password \\"test\\" \:email \\"test@test.com\\"})" "(create\! user)" "(migrate)" "defmacro" "(defmacro [parameters]\\n  `(println ~@parameters))" "(defmacro [parameters]\\r\\n     `(println ~@(parameters)))" "(defmacro [& parameters]\\n  `(println ~@parameters))" "(defmacro [& parameters]\\r\\n     `(println ~@(parameters))\\n     )" "(defn [& p]\\n  (print p))" "(defn a [& p]\\r\\n     (print p))" "(a  [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                          [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                          [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                          [\:email \\"varchar(255) NOT NULL\\"])" "(defmacro b [& parameters]\\r\\n        `(println ~@(parameters))\\r\\n        )" "(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL])" "(defmacro b [& parameters]\\r\\n           `(println ~@parameters)\\r\\n           )" "(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL])" "(defmacro b [& parameters]\\r\\n              `(println ~parameters)\\r\\n              )" "(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL])" "macroexpand-1" "(macroexpand-1 '(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL]))" "(defmacro b [& parameters]\\r\\n                 `(println ~@parameters)\\r\\n                 )" "(macroexpand-1 '(b [\:id int NOT NULL PRIMARY KEY AUTO_INCREMENT] [\:username varchar(50) NOT NULL] [\:password varchar(50) NOT NULL] [\:email varchar(255) NOT NULL]))" "(defmacro create-table [table-name & parameters]\\r\\n  `(when (not (migrated? ~table-name))\\r\\n     (println (str \\"Creating table \\" ~table-name \\"...\\")) (flush)\\r\\n     (sql/db-do-commands spec\\r\\n                         (sql/create-table-ddl\\r\\n                           `table-name\\r\\n                           ~@parameters))\\r\\n     (println \\"Create Done\!\\")))" "(create-table \\"user\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                          [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                          [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                          [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                          [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"])" "(create-table \\"test\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                             [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                             [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                             [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                             [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"])" "(macroexpand-1 '(create-table \\"test\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                                [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                                [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                                [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                                [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"]))" "(defmacro create-table [table-name & parameters]\\r\\n  `(when (not (migrated? ~table-name))\\r\\n     (println (str \\"Creating table \\" ~table-name \\"...\\")) (flush)\\r\\n     (sql/db-do-commands spec\\r\\n                         (sql/create-table-ddl\\r\\n                           ~table-name\\r\\n                           ~@parameters))\\r\\n     (println \\"Create Done\!\\")))" "(macroexpand-1 '(create-table \\"test\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                                   [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                                   [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                                   [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                                   [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"]))" "(create-table \\"test\\" [\:id \\"int NOT NULL PRIMARY KEY AUTO_INCREMENT\\"]\\r\\n                                      [\:username \\"varchar(50) NOT NULL\\"]\\r\\n                                      [\:password \\"varchar(50) NOT NULL\\"]\\r\\n                                      [\:email \\"varchar(255) NOT NULL\\"]\\r\\n                                      [\:create_time \\"timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\\"])" "(migrate)" "(get-userinfo-by-user {\:username \\"test\\"})" "(get-userinfo-by-user {})" "(get-userinfo-by-user {\:username username})" "(defn get-userinfo-by-user []\\r\\n  (select userinfos\\r\\n          (with users)))" ";; \u5F97\u5230\u4E00\u4E2A\u7528\u6237\u7684\u4E2A\u4EBA\u4FE1\u606F\\r\\n(defn get-userinfo-by-user []\\r\\n  (println (select userinfo/userinfos\\r\\n                   (with users))))" "(get-userinfo-by-user)" "(defentity userinfos\\r\\n  (table \:user_infos)\\r\\n  (belongs-to users))" "(get-userinfo-by-user)" "(defentity userinfos\\r\\n  (table \:user_infos)\\r\\n  (belongs-to users {\:fk \:user_id}))" " (get-userinfo-by-user)" "(get-userinfo-by-user)" "(defn get-all-articles-by-user [{\:keys user_id username}] (println \\"1\\"))" "(defn get-all-articles-by-user [{\:keys [user_id username]}] (println 1))" "(get-all-articles-by-user {\:user_id \\"123\\" \:username \\"yy\\"})" "(get-all-articles-by-user {\:user_id \\"123\\"})" "(get-all-articles-by-user { \:username \\"yy\\"})" "(defn get-all-articles-by-user [{\:keys user_id username}]\\n  (select articles))" "(defn get-all-articles-by-user [{\:keys [user_id username]}]\\r\\n     (select articles))" "(get-all-articles-by-user)" "(get-all-articles-by-user {})" "(get-all-articles-by-user {\:username \\"123\\"})" "(defn get-all-articles-by-user [{\:keys [user_id username]}] (println 1))" "(get-all-articles-by-user {\:username \\"123\\"})" "(defn get-all-articles-by-user [{\:keys [user_id username]}]\\n  (select articles))" "(get-all-articles-by-user {\:username \\"123\\"})" "(defn geta []\\n      (select articles))" "(geta)" "articles" "(defn geta []\\r\\n         (select articles))" "(geta)" "(defn geta []\\r\\n            (println  (select articles)))" "(geta)" ";; \u6839\u636E\u6761\u4EF6\u83B7\u5F97\u76F8\u5E94\u7684\u7528\u6237\u4FE1\u606F\\r\\n(defn get-by [conditions]\\r\\n  (select users\\r\\n          (where conditions)))" "(get-by {\:username \\"test1\\"})" "(defn get-by [conditions]\\r\\n     (select articles\\r\\n             (where conditions)))" "(get-by {\:title \\"test\\"})" "(defn geta []\\n  (println (select articles)))" "(geta)" "(defn geta []\\r\\n      (select articles))" "(geta)" "(defn geta []\\r\\n   (select articles)\\n     (with users))" "(defn geta []\\r\\n      (select articles\\r\\n        (with users)))" "(geta)" "(defn geta []\\r\\n         (select articles\\r\\n           (join users)))" "(geta)" "(require keepblog.models.user \:as user)" "(require [keepblog.models.user \:as user])" "(require '[keepblog.models.user \:as user])" "(defn get-articles-by-user [user]\\n  (if-let [user-id (\:id (user/get-by user))]\\n    (select articles\\n            (where {\:user_id user-id})\\n            (order \:create_time \:DESC))\\n    (println \\"error\\")))" "(get-articles-by-user {\:id 1})" "(get-articles-by-user {\:username \\"test1\\"})" "(user/get-by {\:username \\"test1\\"})" "(defn get-articles-by-user [user]\\r\\n     (if-let [user-id (\:id (first (user/get-by user)))]\\r\\n       (select articles\\r\\n               (where {\:user_id user-id})\\r\\n               (order \:create_time \:DESC))\\r\\n       (println \\"error\\")))" "(get-articles-by-user {\:id 1})" "(migrate)" "(defn test [args]\\n  (let [a b] [{\:keys [\:a \:b] args} {\:keys [\:c \:d] args}]\\n    (println a b)))" "(defn test [args]\\r\\n     (let [[a b] [{\:keys [\:a \:b] args} {\:keys [\:c \:d] args}]]\\r\\n       (println a b)))" "(defn test [args]\\n  (let [{x \:a \:b} args]\\n    (println x)))" "(defn test [args]\\r\\n     (let [{x \:a} args]\\r\\n       (println x)))" "(defn test [tags]\\n  (doseq [t tags]\\r\\n        (println t)))" "(test (str/split \\"test;test2\\" \#\\";\\"))" "(save-tag {\:tag \\"test;test2\\" 1})" "(save-tag {\:tag \\"test;test2\\"} {\:id 1})" "(tag/get-by {\:tagname \\"test\\"})" "(defn- save-tag [new-article saved-article]\\r\\n  (let [[{\:keys [tag]} {\:keys [id]}]\\r\\n        [new-article saved-article]]\\r\\n    (let [tags (str/split tag \#\\";\\")]\\r\\n      (doseq [t tags]\\r\\n        (println t)\\r\\n        (if-let [saved_tag_article (tag_article/create\! (\:id (first (tag/get-by {\:tagname t}))) id)]\\r\\n          saved_tag_article\\r\\n          nil)))))" "(save-tag {\:tag \\"test;test2\\"} {\:id 1})" "(\:id (first (tag/get-by {\:tagname \\"test\\"})))" "(tag_article/create\! 1 1)" "(create\! 1 1)" "(create 1 1)" "(create\! 1 1)" "(migrate)" "(save-tag {\:tag \\"test;test2\\"} {\:id 2})" "(def x '())" "x" "(assoc x 1)" "assoc" "(doseq [t (\:a \:b \:c)]\\n  (println t)\\n  t)" "(doseq [t \\"abc\\"]\\r\\n     (println t)\\r\\n     t)" "(doseq [t \\"abc\\"]\\r\\n        (println t)\\r\\n        true)" "(doseq [t \\"abc\\"]\\r\\n           (println t)\\r\\n           1)" "(doseq [t \\"abc\\"]\\r\\n              (println t)\\r\\n              (return 1))" "(conj '(1 2 3) 1)" "(def a []\\n  (let [s '()]\\n    (doseq [t '(\\"a\\" \\"b\\")]\\n      (do\\n        (println t)\\n        (def s (conj s t))\\n        (println s)))))" "(defn a []\\r\\n     (let [s '()]\\r\\n       (doseq [t '(\\"a\\" \\"b\\")]\\r\\n         (do\\r\\n           (println t)\\r\\n           (def s (conj s t))\\r\\n           (println s)))))" "(a)" "(conj '() \\"a\\")" "(def s '())" "(def s (conj s \\"a\\"))" "s" "(defn a []\\r\\n        (let [s '()]\\r\\n          (doseq [t '(\\"a\\" \\"b\\")]\\r\\n            (do\\r\\n              (println t)\\r\\n              (conj\! s t)\\r\\n              (println s)))))" "(a)" "(defn a []\\r\\n           (let [s (conj)]\\r\\n             (doseq [t '(\\"a\\" \\"b\\")]\\r\\n               (do\\r\\n                 (println t)\\r\\n                 (conj\! s t)\\r\\n                 (println s)))))" "(a)" "(conj)" "(def a (conj))" "a" "(conj\! a \\"a\\")" "(defn a []\\n  (let [s '()]\\n    (for [t [\\"a\\" \\"b\\"]]\\n      (do\\n        (println t)\\n        (let [res (conj s t)]\\n          (println res)\\n          res)))))" "(a)" "(def tags (\\"test\\" \\"test2\\"))" "(str/split \\"test;test2\\" \#\\";\\")" "(def tags [\\"test\\" \\"test2\\"])" "(contains? (nil) nil)" "(contains? (nil) \:nil)" "(contains? '(nil) nil)" "(save-tag {\:tag \\"test;test2\\"} {\:id 43})" "(conj '() {\:id 47, \:tag_id 1, \:article_id 43})" "(tag_article/create\! 1 43)" "(get-tag-ids-by-names [\\"test\\" \\"test2\\"])" "(defn get-tag-ids-by-names [names]\\r\\n  (let [tag-ids '()]\\r\\n    (for [name names]\\r\\n      (let [res (conj tag-ids (first (first (get-by {\:tagname name}))))]\\r\\n        res))))" "(get-tag-ids-by-names [\\"test\\" \\"test2\\"])" "(defn get-tag-ids-by-names [names]\\r\\n  (let [tag-ids '()]\\r\\n    (for [name names]\\r\\n      (let [res (conj tag-ids (\:id (first (get-by {\:tagname name}))))]\\r\\n        res))))" "(get-tag-ids-by-names [\\"test\\" \\"test2\\"])" "(defn get-tag-ids-by-names [names]\\r\\n  (let [tag-ids '()]\\r\\n    (for [name names]\\r\\n      (let [res (conj tag-ids (\:id (first (get-by {\:tagname name}))))]\\r\\n        (first res)))))" "(get-tag-ids-by-names [\\"test\\" \\"test2\\"])" "(for [id '(1 2)]\\n  (println id))" "(for [id '(1 2)]\\r\\n     (println id))" "(for [id '(1 2)]\\r\\n        id)" "(def tags [\\"test\\" \\"test2\\"])" "(for [t (get-tag-ids-by-names [\\"test\\" \\"test2\\"])]\\n  t)" "(get-tag-ids-by-names [\\"asdfasdf\\"])" "(get-tag-ids-by-names [\\"asdfasdf\\" \\"adsfasdfa\\"])" "(if (some nil? (get-tag-ids-by-names [\\"test\\" \\"test2\\"]))\\n  (vali/set-error \:get-tag-id-error \\"\u6CA1\u6709\u6B64\u6807\u7B7E\\")\\n  (for [t (get-tag-ids-by-names[\\"test\\" \\"test2\\"])]\\n    (do\\n      (if-let [saved-tag-article (tag_article/create\! tag-id id)]\\n        tag-id))))" "(defn- save-tag [new-article saved-article]\\r\\n  (let [[{\:keys [tag]} {\:keys [id]}]\\r\\n        [new-article saved-article]]\\r\\n    (let [[tags saved-tag-articles]\\r\\n          [(str/split tag \#\\";\\") '()]]\\r\\n      (if (some nil? (tag/get-tag-ids-by-names [\\"test\\" \\"test2\\"]))\\r\\n        (vali/set-error \:get-tag-id-error \\"\u6CA1\u6709\u6B64\u6807\u7B7E\\")\\r\\n        (for [tag-id (tag/get-tag-ids-by-names[\\"test\\" \\"test2\\"])]\\r\\n          (do\\r\\n            (if-let [saved-tag-article (tag_article/create\! tag-id id)]\\r\\n              tag-id)))))))" "(save-tag {\:tag \\"test;test2\\"} {\:id 43})" "(defn- save-tag [new-article saved-article]\\r\\n  (let [[{\:keys [tag]} {\:keys [id]}]\\r\\n        [new-article saved-article]]\\r\\n    (let [[tags saved-tag-articles]\\r\\n          [(str/split tag \#\\";\\") '()]]\\r\\n      (if (some nil? (tag/get-tag-ids-by-names [\\"test\\" \\"test2\\"]))\\r\\n        (vali/set-error \:get-tag-id-error \\"\u6CA1\u6709\u6B64\u6807\u7B7E\\")\\r\\n        (for [tag-id (tag/get-tag-ids-by-names[\\"test\\" \\"test2\\"])]\\r\\n          (do\\r\\n            (if-let [saved-tag-article (tag_article/create\! tag-id id)]\\r\\n              (first tag-id))))))))" "(save-tag {\:tag \\"test;test2\\"} {\:id 43})" "(save-tag {\:tag \\"asdfasdf;test2\\"} {\:id 43})" "(defn- save-tag [new-article saved-article]\\r\\n  (let [[{\:keys [tag]} {\:keys [id]}]\\r\\n        [new-article saved-article]]\\r\\n    (let [[tags saved-tag-articles]\\r\\n          [(str/split tag \#\\";\\") '()]]\\r\\n      (if (some nil? (tag/get-tag-ids-by-names tags))\\r\\n        (vali/set-error \:get-tag-id-error \\"\u6CA1\u6709\u6B64\u6807\u7B7E\\")\\r\\n        (for [tag-id (tag/get-tag-ids-by-names tags)]\\r\\n          (do\\r\\n            (if-let [saved-tag-article (tag_article/create\! tag-id id)]\\r\\n              (first tag-id))))))))" "(save-tag {\:tag \\"test;test2\\"} {\:id 43})" "(save-tag {\:tag \\"testasdfasdf;test2\\"} {\:id 43})" "(tag/get-tag-ids-by-names \\"etafasdfasd;asdfasdf\\")" "(tag/get-tag-ids-by-names \\"etafasdfasd\\" \\"asdfasdf\\")" "(tag/get-tag-ids-by-names [\\"etafasdfasd\\" \\"asdfasdf\\"])" "(some nil? ((nil) (nil)))" "(some nil? '((nil) (nil)))" "(def tags [\\"asdfasd\\" \\"adsfasdf\\"])" "(if (some nil? (tag/get-tag-ids-by-names tags))\\n  (println 1)\\n  (println 2))" "(defn- save-tag [new-article saved-article]\\r\\n  (let [[{\:keys [tag]} {\:keys [id]}]\\r\\n        [new-article saved-article]]\\r\\n    (let [[tags saved-tag-articles]\\r\\n          [(str/split tag \#\\";\\") '()]]\\r\\n      (if (some nil? (tag/get-tag-ids-by-names tags))\\r\\n        (for [tag-id (tag/get-tag-ids-by-names tags)]\\r\\n          (do\\r\\n            (if-let [saved-tag-article (tag_article/create\! tag-id id)]\\r\\n              (first tag-id))))\\r\\n        (vali/set-error \:get-tag-id-error \\"\u6CA1\u6709\u6B64\u6807\u7B7E\\")))))" "(save-tag {\:tag \\"testasdfasdf;test2\\"} {\:id 43})" "(defn- save-tag [new-article saved-article]\\r\\n  (let [[{\:keys [tag]} {\:keys [id]}]\\r\\n        [new-article saved-article]]\\r\\n    (let [[tags saved-tag-articles]\\r\\n          [(str/split tag \#\\";\\") '()]]\\r\\n      (if (some nil? (tag/get-tag-ids-by-names tags))\\r\\n        (for [tag-id (tag/get-tag-ids-by-names tags)]\\r\\n          (do\\r\\n            (if-let [saved-tag-article (tag_article/create\! tag-id id)]\\r\\n              (first tag-id))))\\r\\n        (vali/set-error \:get-tag-id-error \\"\u6CA1\u6709\u6B64\u6807\u7B7E\\")))))" "(save-tag {\:tag \\"tesasdf;sdfasdf\\"} {\:id 43})" "(if (some nil? (tag/get-tag-ids-by-names tags))\\r\\n        (for [tag-id (tag/get-tag-ids-by-names tags)]\\r\\n          (do\\r\\n            (if-let [saved-tag-article (tag_article/create\! tag-id id)]\\r\\n              (first tag-id))))\\r\\n        (vali/set-error \:get-tag-id-error \\"\u6CA1\u6709\u6B64\u6807\u7B7E\\"))" "(if (some nil? (tag/get-tag-ids-by-names tags))\\n  (println 1 )\\n  (println 2))" "(if (some nil? (tag/get-tag-ids-by-names tags))\\n  (for [tag-id (tag/get-tag-ids-by-names tags)]\\n    tag-id)\\n  (println 2))" "(if (some nil? (tag/get-tag-ids-by-names tags))\\r\\n     (for [tag-id (tag/get-tag-ids-by-names tags)]\\r\\n       (if-let [saved-tag-article (tag_article/create\! tag-id 43)]\\n         (first tag-id)))\\r\\n     (println 2))" "(if (some nil?) '(\\"asdf\\" nil))" "(if (some nil?) '(\\"asdf\\" nil)\\n  (println 1)\\n  (println 2))" "(if (some nil? '(\\"asdf\\" nil))\\r\\n     (println 1)\\r\\n     (println 2))" "(defn- save-tag [new-article saved-article]\\r\\n  (let [[{\:keys [tag]} {\:keys [id]}]\\r\\n        [new-article saved-article]]\\r\\n    (let [[tags saved-tag-articles]\\r\\n          [(str/split tag \#\\";\\") '()]]\\r\\n      (if (some nil? (tag/get-tag-ids-by-names tags))\\r\\n        (vali/set-error \:get-tag-id-error \\"\u6CA1\u6709\u6B64\u6807\u7B7E\\")\\r\\n        (for [tag-id (tag/get-tag-ids-by-names tags)]\\r\\n          (if-let [saved-tag-article (tag_article/create\! tag-id id)]\\r\\n            (first tag-id)))))))" "(save-tag {\:tag \\"test;test2\\"} {\:id 43})" "(some \#{nil} (save-tag {\:tag \\"test;test2\\"} {\:id 43}))" "(save-tag {\:tag \\"test;test2\\"} {\:id 43})" "(some \#{nil} '(nil nil))" "(some nil? (save-tag {\:tag \\"test;test2\\"} {\:id 43}))" "(nil? '(1 2))" "(nil? '(nil nil))" "(nil? nil)" "(some nil? nil)" "(some (zipmap '(1 2) (repeat true)) '(1 2))" "(some (zipmap '(nil nil) (repeat true)) '(nil  nil))" "(zipmap '(nil nil))" "(zipmap '(nil nil) (repeat true))" "(zipmap '(nil nil) '(nil nil))" "(contains? nil  (zipmap '(nil nil) (repeat true)))" "(contains? nil  zipmap '(nil nil) '(nil nil))" "(contains? nil  (zipmap '(nil nil) '(nil nil)))" "(contains? nil  (zipmap '(1 2) '(1 2)))" "(vector '(1 2))" "(defn in?\\n  [coll elm]\\n  (some \#(\= elm %) coll))" "(in? '(nil nil) nil)" "(in? '(1 2) nil)"]
eclipse.preferences.version=1
